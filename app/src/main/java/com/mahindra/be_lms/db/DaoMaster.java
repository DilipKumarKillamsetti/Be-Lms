package com.mahindra.be_lms.db;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * Master of DAO (schema version 1): knows all DAOs.
 */
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 1;

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(CompanyDao.class);
        registerDaoClass(DesignationDao.class);
        registerDaoClass(LocationDao.class);
        registerDaoClass(QualificationDao.class);
        registerDaoClass(ProfileDao.class);
        registerDaoClass(UserDao.class);
        registerDaoClass(ProductDao.class);
        registerDaoClass(ModelDao.class);
        registerDaoClass(CategoryDao.class);
        registerDaoClass(SubCategoryDao.class);
        registerDaoClass(DocumentTreeDao.class);
        registerDaoClass(QueriesDao.class);
        registerDaoClass(QueryResponseDao.class);
        registerDaoClass(EventDao.class);
        registerDaoClass(CourseDao.class);
        registerDaoClass(CoordinatorsDao.class);
        registerDaoClass(TrainersDao.class);
        registerDaoClass(DocumentDao.class);
        registerDaoClass(NotificationsDao.class);
        registerDaoClass(TechnicalUploadDao.class);
        registerDaoClass(MenuRightsDao.class);
    }

    /**
     * Creates underlying database table using DAOs.
     */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        CompanyDao.createTable(db, ifNotExists);
        DesignationDao.createTable(db, ifNotExists);
        LocationDao.createTable(db, ifNotExists);
        QualificationDao.createTable(db, ifNotExists);
        ProfileDao.createTable(db, ifNotExists);
        UserDao.createTable(db, ifNotExists);
        ProductDao.createTable(db, ifNotExists);
        ModelDao.createTable(db, ifNotExists);
        CategoryDao.createTable(db, ifNotExists);
        SubCategoryDao.createTable(db, ifNotExists);
        DocumentTreeDao.createTable(db, ifNotExists);
        QueriesDao.createTable(db, ifNotExists);
        QueryResponseDao.createTable(db, ifNotExists);
        EventDao.createTable(db, ifNotExists);
        CourseDao.createTable(db, ifNotExists);
        CoordinatorsDao.createTable(db, ifNotExists);
        TrainersDao.createTable(db, ifNotExists);
        DocumentDao.createTable(db, ifNotExists);
        NotificationsDao.createTable(db, ifNotExists);
        TechnicalUploadDao.createTable(db, ifNotExists);
        MenuRightsDao.createTable(db, ifNotExists);
    }

    /**
     * Drops underlying database table using DAOs.
     */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        CompanyDao.dropTable(db, ifExists);
        DesignationDao.dropTable(db, ifExists);
        LocationDao.dropTable(db, ifExists);
        QualificationDao.dropTable(db, ifExists);
        ProfileDao.dropTable(db, ifExists);
        UserDao.dropTable(db, ifExists);
        ProductDao.dropTable(db, ifExists);
        ModelDao.dropTable(db, ifExists);
        CategoryDao.dropTable(db, ifExists);
        SubCategoryDao.dropTable(db, ifExists);
        DocumentTreeDao.dropTable(db, ifExists);
        QueriesDao.dropTable(db, ifExists);
        QueryResponseDao.dropTable(db, ifExists);
        EventDao.dropTable(db, ifExists);
        CourseDao.dropTable(db, ifExists);
        CoordinatorsDao.dropTable(db, ifExists);
        TrainersDao.dropTable(db, ifExists);
        DocumentDao.dropTable(db, ifExists);
        NotificationsDao.dropTable(db, ifExists);
        TechnicalUploadDao.dropTable(db, ifExists);
        MenuRightsDao.dropTable(db, ifExists);
    }

    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }

    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }

    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }

    /**
     * WARNING: Drops all table on Upgrade! Use only during development.
     */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

}
