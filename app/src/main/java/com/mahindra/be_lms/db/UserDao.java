package com.mahindra.be_lms.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "USER".
 */
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    public UserDao(DaoConfig config) {
        super(config);
    }


    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userID
                "\"USER_FIRST_NAME\" TEXT," + // 2: userFirstName
                "\"USER_LAST_NAME\" TEXT," + // 3: userLastName
                "\"USERNAME\" TEXT," + // 4: username
                "\"PASSWORD\" TEXT," + // 5: password
                "\"USER_EMAIL_ID\" TEXT," + // 6: userEmailID
                "\"USER_MOBILE_NO\" TEXT," + // 7: userMobileNo
                "\"USER_ORG\" TEXT," + // 8: userOrg
                "\"USER_ORG_CODE\" TEXT," + // 9: userOrgCode
                "\"USER_LOCATION_ID\" TEXT," + // 10: userLocationID
                "\"USER_DESIGNATION_ID\" TEXT," + // 11: userDesignationID
                "\"USER_PICTURE\" TEXT," + // 12: userPicture
                "\"USER_QUALIFICATION_ID\" TEXT," + // 13: userQualificationID
                "\"USER_DOB\" TEXT," + // 14: userDOB
                "\"USER_DOJ\" TEXT," + // 15: userDOJ
                "\"USER_ROLE\" TEXT," + // 16: userRole
                "\"PROFILES\" TEXT," + // 17: profiles
                "\"USER_GROUPS\" TEXT);"); // 18: userGroups
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String userID = entity.getUserID();
        if (userID != null) {
            stmt.bindString(2, userID);
        }

        String userFirstName = entity.getUserFirstName();
        if (userFirstName != null) {
            stmt.bindString(3, userFirstName);
        }

        String userLastName = entity.getUserLastName();
        if (userLastName != null) {
            stmt.bindString(4, userLastName);
        }

        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(5, username);
        }

        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(6, password);
        }

        String userEmailID = entity.getUserEmailID();
        if (userEmailID != null) {
            stmt.bindString(7, userEmailID);
        }

        String userMobileNo = entity.getUserMobileNo();
        if (userMobileNo != null) {
            stmt.bindString(8, userMobileNo);
        }

        String userOrg = entity.getUserOrg();
        if (userOrg != null) {
            stmt.bindString(9, userOrg);
        }

        String userOrgCode = entity.getUserOrgCode();
        if (userOrgCode != null) {
            stmt.bindString(10, userOrgCode);
        }

        String userLocationID = entity.getUserLocationID();
        if (userLocationID != null) {
            stmt.bindString(11, userLocationID);
        }

        String userDesignationID = entity.getUserDesignationID();
        if (userDesignationID != null) {
            stmt.bindString(12, userDesignationID);
        }

        String userPicture = entity.getUserPicture();
        if (userPicture != null) {
            stmt.bindString(13, userPicture);
        }

        String userQualificationID = entity.getUserQualificationID();
        if (userQualificationID != null) {
            stmt.bindString(14, userQualificationID);
        }

        String userDOB = entity.getUserDOB();
        if (userDOB != null) {
            stmt.bindString(15, userDOB);
        }

        String userDOJ = entity.getUserDOJ();
        if (userDOJ != null) {
            stmt.bindString(16, userDOJ);
        }

        String userRole = entity.getUserRole();
        if (userRole != null) {
            stmt.bindString(17, userRole);
        }

        String profiles = entity.getProfiles();
        if (profiles != null) {
            stmt.bindString(18, profiles);
        }

        String userGroups = entity.getUserGroups();
        if (userGroups != null) {
            stmt.bindString(19, userGroups);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userID
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userFirstName
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userLastName
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // username
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // password
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // userEmailID
                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // userMobileNo
                cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // userOrg
                cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // userOrgCode
                cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // userLocationID
                cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // userDesignationID
                cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // userPicture
                cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // userQualificationID
                cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // userDOB
                cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // userDOJ
                cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // userRole
                cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // profiles
                cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18) // userGroups
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserFirstName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserLastName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUsername(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPassword(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUserEmailID(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUserMobileNo(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUserOrg(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUserOrgCode(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUserLocationID(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUserDesignationID(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setUserPicture(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setUserQualificationID(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setUserDOB(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setUserDOJ(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setUserRole(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setProfiles(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setUserGroups(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(User entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserID = new Property(1, String.class, "userID", false, "USER_ID");
        public final static Property UserFirstName = new Property(2, String.class, "userFirstName", false, "USER_FIRST_NAME");
        public final static Property UserLastName = new Property(3, String.class, "userLastName", false, "USER_LAST_NAME");
        public final static Property Username = new Property(4, String.class, "username", false, "USERNAME");
        public final static Property Password = new Property(5, String.class, "password", false, "PASSWORD");
        public final static Property UserEmailID = new Property(6, String.class, "userEmailID", false, "USER_EMAIL_ID");
        public final static Property UserMobileNo = new Property(7, String.class, "userMobileNo", false, "USER_MOBILE_NO");
        public final static Property UserOrg = new Property(8, String.class, "userOrg", false, "USER_ORG");
        public final static Property UserOrgCode = new Property(9, String.class, "userOrgCode", false, "USER_ORG_CODE");
        public final static Property UserLocationID = new Property(10, String.class, "userLocationID", false, "USER_LOCATION_ID");
        public final static Property UserDesignationID = new Property(11, String.class, "userDesignationID", false, "USER_DESIGNATION_ID");
        public final static Property UserPicture = new Property(12, String.class, "userPicture", false, "USER_PICTURE");
        public final static Property UserQualificationID = new Property(13, String.class, "userQualificationID", false, "USER_QUALIFICATION_ID");
        public final static Property UserDOB = new Property(14, String.class, "userDOB", false, "USER_DOB");
        public final static Property UserDOJ = new Property(15, String.class, "userDOJ", false, "USER_DOJ");
        public final static Property UserRole = new Property(16, String.class, "userRole", false, "USER_ROLE");
        public final static Property Profiles = new Property(17, String.class, "profiles", false, "PROFILES");
        public final static Property UserGroups = new Property(18, String.class, "userGroups", false, "USER_GROUPS");
    }

}
