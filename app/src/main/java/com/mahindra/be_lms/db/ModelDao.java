package com.mahindra.be_lms.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "MODEL".
 */
public class ModelDao extends AbstractDao<Model, Long> {

    public static final String TABLENAME = "MODEL";

    public ModelDao(DaoConfig config) {
        super(config);
    }


    public ModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MODEL_ID\" TEXT," + // 1: modelID
                "\"MODEL_NAME\" TEXT," + // 2: modelName
                "\"MODEL_SEQUENCE\" TEXT," + // 3: modelSequence
                "\"PRODUCT_ID\" TEXT);"); // 4: productID
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MODEL\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, Model entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String modelID = entity.getModelID();
        if (modelID != null) {
            stmt.bindString(2, modelID);
        }

        String modelName = entity.getModelName();
        if (modelName != null) {
            stmt.bindString(3, modelName);
        }

        String modelSequence = entity.getModelSequence();
        if (modelSequence != null) {
            stmt.bindString(4, modelSequence);
        }

        String productID = entity.getProductID();
        if (productID != null) {
            stmt.bindString(5, productID);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public Model readEntity(Cursor cursor, int offset) {
        Model entity = new Model( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // modelID
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // modelName
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // modelSequence
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // productID
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, Model entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setModelID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setModelName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setModelSequence(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setProductID(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(Model entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(Model entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity Model.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ModelID = new Property(1, String.class, "modelID", false, "MODEL_ID");
        public final static Property ModelName = new Property(2, String.class, "modelName", false, "MODEL_NAME");
        public final static Property ModelSequence = new Property(3, String.class, "modelSequence", false, "MODEL_SEQUENCE");
        public final static Property ProductID = new Property(4, String.class, "productID", false, "PRODUCT_ID");
    }

}
