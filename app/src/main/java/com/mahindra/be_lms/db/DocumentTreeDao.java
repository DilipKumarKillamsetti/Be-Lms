package com.mahindra.be_lms.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "DOCUMENT_TREE".
 */
public class DocumentTreeDao extends AbstractDao<DocumentTree, Long> {

    public static final String TABLENAME = "DOCUMENT_TREE";

    public DocumentTreeDao(DaoConfig config) {
        super(config);
    }


    public DocumentTreeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"DOCUMENT_TREE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DOCUMENT_TREE_ID\" TEXT," + // 1: documentTreeID
                "\"DOCUMENT_TREE_ITEM\" TEXT," + // 2: documentTreeItem
                "\"DOCUMENT_TREE_DOCUMENT\" TEXT," + // 3: documentTreeDocument
                "\"DOCUMENT_TREE_SEQUENCE\" TEXT," + // 4: documentTreeSequence
                "\"PRODUCT_ID\" TEXT," + // 5: productID
                "\"MODEL_ID\" TEXT," + // 6: modelID
                "\"PARENT_ID\" TEXT);"); // 7: parentID
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOCUMENT_TREE\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, DocumentTree entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String documentTreeID = entity.getDocumentTreeID();
        if (documentTreeID != null) {
            stmt.bindString(2, documentTreeID);
        }

        String documentTreeItem = entity.getDocumentTreeItem();
        if (documentTreeItem != null) {
            stmt.bindString(3, documentTreeItem);
        }

        String documentTreeDocument = entity.getDocumentTreeDocument();
        if (documentTreeDocument != null) {
            stmt.bindString(4, documentTreeDocument);
        }

        String documentTreeSequence = entity.getDocumentTreeSequence();
        if (documentTreeSequence != null) {
            stmt.bindString(5, documentTreeSequence);
        }

        String productID = entity.getProductID();
        if (productID != null) {
            stmt.bindString(6, productID);
        }

        String modelID = entity.getModelID();
        if (modelID != null) {
            stmt.bindString(7, modelID);
        }

        String parentID = entity.getParentID();
        if (parentID != null) {
            stmt.bindString(8, parentID);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public DocumentTree readEntity(Cursor cursor, int offset) {
        DocumentTree entity = new DocumentTree( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // documentTreeID
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // documentTreeItem
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // documentTreeDocument
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // documentTreeSequence
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // productID
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // modelID
                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // parentID
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, DocumentTree entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDocumentTreeID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDocumentTreeItem(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDocumentTreeDocument(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDocumentTreeSequence(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setProductID(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setModelID(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setParentID(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(DocumentTree entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(DocumentTree entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity DocumentTree.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DocumentTreeID = new Property(1, String.class, "documentTreeID", false, "DOCUMENT_TREE_ID");
        public final static Property DocumentTreeItem = new Property(2, String.class, "documentTreeItem", false, "DOCUMENT_TREE_ITEM");
        public final static Property DocumentTreeDocument = new Property(3, String.class, "documentTreeDocument", false, "DOCUMENT_TREE_DOCUMENT");
        public final static Property DocumentTreeSequence = new Property(4, String.class, "documentTreeSequence", false, "DOCUMENT_TREE_SEQUENCE");
        public final static Property ProductID = new Property(5, String.class, "productID", false, "PRODUCT_ID");
        public final static Property ModelID = new Property(6, String.class, "modelID", false, "MODEL_ID");
        public final static Property ParentID = new Property(7, String.class, "parentID", false, "PARENT_ID");
    }

}
