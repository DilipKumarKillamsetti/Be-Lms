package com.mahindra.be_lms.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "SUB_CATEGORY".
 */
public class SubCategoryDao extends AbstractDao<SubCategory, Long> {

    public static final String TABLENAME = "SUB_CATEGORY";

    public SubCategoryDao(DaoConfig config) {
        super(config);
    }


    public SubCategoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"SUB_CATEGORY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SUB_CATEGORY_ID\" TEXT," + // 1: subCategoryID
                "\"SUB_CATEGORY_NAME\" TEXT," + // 2: subCategoryName
                "\"SUB_CATEGORY_SEQUENCE\" TEXT," + // 3: subCategorySequence
                "\"CATEGORY_ID\" TEXT);"); // 4: categoryID
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SUB_CATEGORY\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, SubCategory entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String subCategoryID = entity.getSubCategoryID();
        if (subCategoryID != null) {
            stmt.bindString(2, subCategoryID);
        }

        String subCategoryName = entity.getSubCategoryName();
        if (subCategoryName != null) {
            stmt.bindString(3, subCategoryName);
        }

        String subCategorySequence = entity.getSubCategorySequence();
        if (subCategorySequence != null) {
            stmt.bindString(4, subCategorySequence);
        }

        String categoryID = entity.getCategoryID();
        if (categoryID != null) {
            stmt.bindString(5, categoryID);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public SubCategory readEntity(Cursor cursor, int offset) {
        SubCategory entity = new SubCategory( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // subCategoryID
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // subCategoryName
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // subCategorySequence
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // categoryID
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, SubCategory entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSubCategoryID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSubCategoryName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSubCategorySequence(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCategoryID(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(SubCategory entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(SubCategory entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity SubCategory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SubCategoryID = new Property(1, String.class, "subCategoryID", false, "SUB_CATEGORY_ID");
        public final static Property SubCategoryName = new Property(2, String.class, "subCategoryName", false, "SUB_CATEGORY_NAME");
        public final static Property SubCategorySequence = new Property(3, String.class, "subCategorySequence", false, "SUB_CATEGORY_SEQUENCE");
        public final static Property CategoryID = new Property(4, String.class, "categoryID", false, "CATEGORY_ID");
    }

}
