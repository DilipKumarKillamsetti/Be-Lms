package com.mahindra.be_lms.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "MENU_RIGHTS".
 */
public class MenuRightsDao extends AbstractDao<MenuRights, Long> {

    public static final String TABLENAME = "MENU_RIGHTS";

    public MenuRightsDao(DaoConfig config) {
        super(config);
    }


    public MenuRightsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"MENU_RIGHTS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"REGISTRATION\" TEXT," + // 1: registration
                "\"SEARCH\" TEXT," + // 2: search
                "\"POWEROL_CARE\" TEXT," + // 3: powerolCare
                "\"MOST_VIEWED\" TEXT," + // 4: mostViewed
                "\"MY_PROFILE\" TEXT," + // 5: myProfile
                "\"SURVEY_FEEDBACKS\" TEXT," + // 6: surveyFeedbacks
                "\"MY_TRAINING_PASSPORT\" TEXT," + // 7: myTrainingPassport
                "\"LEARNING_TEST_QUIZS\" TEXT," + // 8: learningTestQuizs
                "\"MANUALS_BULLETINS\" TEXT," + // 9: manualsBulletins
                "\"TRAINING_CALENDER_NOMINATION\" TEXT," + // 10: trainingCalenderNomination
                "\"QUERIES_RESPONSE\" TEXT," + // 11: queriesResponse
                "\"TECHNICAL_UPLOADS\" TEXT," + // 12: technicalUploads
                "\"MY_FIELD_RECORDS\" TEXT," + // 13: myFieldRecords
                "\"REPORTS\" TEXT," + // 14: reports
                "\"MANPOWER_EDITION\" TEXT);"); // 15: manpowerEdition
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MENU_RIGHTS\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, MenuRights entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String registration = entity.getRegistration();
        if (registration != null) {
            stmt.bindString(2, registration);
        }

        String search = entity.getSearch();
        if (search != null) {
            stmt.bindString(3, search);
        }

        String powerolCare = entity.getPowerolCare();
        if (powerolCare != null) {
            stmt.bindString(4, powerolCare);
        }

        String mostViewed = entity.getMostViewed();
        if (mostViewed != null) {
            stmt.bindString(5, mostViewed);
        }

        String myProfile = entity.getMyProfile();
        if (myProfile != null) {
            stmt.bindString(6, myProfile);
        }

        String surveyFeedbacks = entity.getSurveyFeedbacks();
        if (surveyFeedbacks != null) {
            stmt.bindString(7, surveyFeedbacks);
        }

        String myTrainingPassport = entity.getMyTrainingPassport();
        if (myTrainingPassport != null) {
            stmt.bindString(8, myTrainingPassport);
        }

        String learningTestQuizs = entity.getLearningTestQuizs();
        if (learningTestQuizs != null) {
            stmt.bindString(9, learningTestQuizs);
        }

        String manualsBulletins = entity.getManualsBulletins();
        if (manualsBulletins != null) {
            stmt.bindString(10, manualsBulletins);
        }

        String trainingCalenderNomination = entity.getTrainingCalenderNomination();
        if (trainingCalenderNomination != null) {
            stmt.bindString(11, trainingCalenderNomination);
        }

        String queriesResponse = entity.getQueriesResponse();
        if (queriesResponse != null) {
            stmt.bindString(12, queriesResponse);
        }

        String technicalUploads = entity.getTechnicalUploads();
        if (technicalUploads != null) {
            stmt.bindString(13, technicalUploads);
        }

        String myFieldRecords = entity.getMyFieldRecords();
        if (myFieldRecords != null) {
            stmt.bindString(14, myFieldRecords);
        }

        String reports = entity.getReports();
        if (reports != null) {
            stmt.bindString(15, reports);
        }

        String manpowerEdition = entity.getManpowerEdition();
        if (manpowerEdition != null) {
            stmt.bindString(16, manpowerEdition);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public MenuRights readEntity(Cursor cursor, int offset) {
        MenuRights entity = new MenuRights( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // registration
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // search
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // powerolCare
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // mostViewed
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // myProfile
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // surveyFeedbacks
                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // myTrainingPassport
                cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // learningTestQuizs
                cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // manualsBulletins
                cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // trainingCalenderNomination
                cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // queriesResponse
                cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // technicalUploads
                cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // myFieldRecords
                cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // reports
                cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // manpowerEdition
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, MenuRights entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRegistration(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSearch(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPowerolCare(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMostViewed(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMyProfile(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSurveyFeedbacks(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMyTrainingPassport(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLearningTestQuizs(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setManualsBulletins(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTrainingCalenderNomination(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setQueriesResponse(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setTechnicalUploads(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setMyFieldRecords(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setReports(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setManpowerEdition(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(MenuRights entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(MenuRights entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity MenuRights.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Registration = new Property(1, String.class, "registration", false, "REGISTRATION");
        public final static Property Search = new Property(2, String.class, "search", false, "SEARCH");
        public final static Property PowerolCare = new Property(3, String.class, "powerolCare", false, "POWEROL_CARE");
        public final static Property MostViewed = new Property(4, String.class, "mostViewed", false, "MOST_VIEWED");
        public final static Property MyProfile = new Property(5, String.class, "myProfile", false, "MY_PROFILE");
        public final static Property SurveyFeedbacks = new Property(6, String.class, "surveyFeedbacks", false, "SURVEY_FEEDBACKS");
        public final static Property MyTrainingPassport = new Property(7, String.class, "myTrainingPassport", false, "MY_TRAINING_PASSPORT");
        public final static Property LearningTestQuizs = new Property(8, String.class, "learningTestQuizs", false, "LEARNING_TEST_QUIZS");
        public final static Property ManualsBulletins = new Property(9, String.class, "manualsBulletins", false, "MANUALS_BULLETINS");
        public final static Property TrainingCalenderNomination = new Property(10, String.class, "trainingCalenderNomination", false, "TRAINING_CALENDER_NOMINATION");
        public final static Property QueriesResponse = new Property(11, String.class, "queriesResponse", false, "QUERIES_RESPONSE");
        public final static Property TechnicalUploads = new Property(12, String.class, "technicalUploads", false, "TECHNICAL_UPLOADS");
        public final static Property MyFieldRecords = new Property(13, String.class, "myFieldRecords", false, "MY_FIELD_RECORDS");
        public final static Property Reports = new Property(14, String.class, "reports", false, "REPORTS");
        public final static Property ManpowerEdition = new Property(15, String.class, "manpowerEdition", false, "MANPOWER_EDITION");
    }

}
