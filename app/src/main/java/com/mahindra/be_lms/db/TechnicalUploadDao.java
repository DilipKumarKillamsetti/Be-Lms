package com.mahindra.be_lms.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "TECHNICAL_UPLOAD".
 */
public class TechnicalUploadDao extends AbstractDao<TechnicalUpload, Long> {

    public static final String TABLENAME = "TECHNICAL_UPLOAD";

    public TechnicalUploadDao(DaoConfig config) {
        super(config);
    }


    public TechnicalUploadDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"TECHNICAL_UPLOAD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TECHNICAL_UPLOAD_ID\" TEXT," + // 1: technicalUploadID
                "\"TECHNICAL_UPLOAD_CATEGORY\" TEXT," + // 2: technicalUploadCategory
                "\"TECHNICAL_UPLOAD_SUBCATEGORY\" TEXT," + // 3: technicalUploadSubcategory
                "\"TECHNICAL_UPLOAD_TITLE\" TEXT," + // 4: technicalUploadTitle
                "\"TECHNICAL_UPLOAD_DESC\" TEXT," + // 5: technicalUploadDesc
                "\"TECHNICAL_UPLOAD_ATTACHMENTS\" TEXT);"); // 6: technicalUploadAttachments
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TECHNICAL_UPLOAD\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, TechnicalUpload entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String technicalUploadID = entity.getTechnicalUploadID();
        if (technicalUploadID != null) {
            stmt.bindString(2, technicalUploadID);
        }

        String technicalUploadCategory = entity.getTechnicalUploadCategory();
        if (technicalUploadCategory != null) {
            stmt.bindString(3, technicalUploadCategory);
        }

        String technicalUploadSubcategory = entity.getTechnicalUploadSubcategory();
        if (technicalUploadSubcategory != null) {
            stmt.bindString(4, technicalUploadSubcategory);
        }

        String technicalUploadTitle = entity.getTechnicalUploadTitle();
        if (technicalUploadTitle != null) {
            stmt.bindString(5, technicalUploadTitle);
        }

        String technicalUploadDesc = entity.getTechnicalUploadDesc();
        if (technicalUploadDesc != null) {
            stmt.bindString(6, technicalUploadDesc);
        }

        String technicalUploadAttachments = entity.getTechnicalUploadAttachments();
        if (technicalUploadAttachments != null) {
            stmt.bindString(7, technicalUploadAttachments);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public TechnicalUpload readEntity(Cursor cursor, int offset) {
        TechnicalUpload entity = new TechnicalUpload( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // technicalUploadID
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // technicalUploadCategory
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // technicalUploadSubcategory
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // technicalUploadTitle
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // technicalUploadDesc
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // technicalUploadAttachments
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, TechnicalUpload entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTechnicalUploadID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTechnicalUploadCategory(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTechnicalUploadSubcategory(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTechnicalUploadTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTechnicalUploadDesc(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTechnicalUploadAttachments(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(TechnicalUpload entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(TechnicalUpload entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity TechnicalUpload.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TechnicalUploadID = new Property(1, String.class, "technicalUploadID", false, "TECHNICAL_UPLOAD_ID");
        public final static Property TechnicalUploadCategory = new Property(2, String.class, "technicalUploadCategory", false, "TECHNICAL_UPLOAD_CATEGORY");
        public final static Property TechnicalUploadSubcategory = new Property(3, String.class, "technicalUploadSubcategory", false, "TECHNICAL_UPLOAD_SUBCATEGORY");
        public final static Property TechnicalUploadTitle = new Property(4, String.class, "technicalUploadTitle", false, "TECHNICAL_UPLOAD_TITLE");
        public final static Property TechnicalUploadDesc = new Property(5, String.class, "technicalUploadDesc", false, "TECHNICAL_UPLOAD_DESC");
        public final static Property TechnicalUploadAttachments = new Property(6, String.class, "technicalUploadAttachments", false, "TECHNICAL_UPLOAD_ATTACHMENTS");
    }

}
