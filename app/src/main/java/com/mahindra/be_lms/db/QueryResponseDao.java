package com.mahindra.be_lms.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "QUERY_RESPONSE".
 */
public class QueryResponseDao extends AbstractDao<QueryResponse, Long> {

    public static final String TABLENAME = "QUERY_RESPONSE";

    public QueryResponseDao(DaoConfig config) {
        super(config);
    }


    public QueryResponseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"QUERY_RESPONSE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"QUERY_ID\" TEXT," + // 1: queryID
                "\"RESPOSE_PERSON\" TEXT," + // 2: resposePerson
                "\"MESSAGE\" TEXT," + // 3: message
                "\"TITLE\" TEXT," + // 4: title
                "\"MSG_TYPE\" TEXT," + // 5: msg_type
                "\"QUERY_REPLY_ATTACHMENT\" TEXT," + // 6: queryReplyAttachment
                "\"QUERY_RESPONSE_EXTRA_LINK\" TEXT," + // 7: queryResponseExtraLink
                "\"QUERY_RESPONSE_TYPE\" TEXT);"); // 8: queryResponseType
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"QUERY_RESPONSE\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, QueryResponse entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String queryID = entity.getQueryID();
        if (queryID != null) {
            stmt.bindString(2, queryID);
        }

        String resposePerson = entity.getResposePerson();
        if (resposePerson != null) {
            stmt.bindString(3, resposePerson);
        }

        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(4, message);
        }

        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }

        String msg_type = entity.getMsg_type();
        if (msg_type != null) {
            stmt.bindString(6, msg_type);
        }

        String queryReplyAttachment = entity.getQueryReplyAttachment();
        if (queryReplyAttachment != null) {
            stmt.bindString(7, queryReplyAttachment);
        }

        String queryResponseExtraLink = entity.getQueryResponseExtraLink();
        if (queryResponseExtraLink != null) {
            stmt.bindString(8, queryResponseExtraLink);
        }

        String queryResponseType = entity.getQueryResponseType();
        if (queryResponseType != null) {
            stmt.bindString(9, queryResponseType);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public QueryResponse readEntity(Cursor cursor, int offset) {
        QueryResponse entity = new QueryResponse( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // queryID
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // resposePerson
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // message
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // title
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // msg_type
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // queryReplyAttachment
                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // queryResponseExtraLink
                cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // queryResponseType
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, QueryResponse entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setQueryID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setResposePerson(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMessage(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMsg_type(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setQueryReplyAttachment(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setQueryResponseExtraLink(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setQueryResponseType(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(QueryResponse entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(QueryResponse entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity QueryResponse.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property QueryID = new Property(1, String.class, "queryID", false, "QUERY_ID");
        public final static Property ResposePerson = new Property(2, String.class, "resposePerson", false, "RESPOSE_PERSON");
        public final static Property Message = new Property(3, String.class, "message", false, "MESSAGE");
        public final static Property Title = new Property(4, String.class, "title", false, "TITLE");
        public final static Property Msg_type = new Property(5, String.class, "msg_type", false, "MSG_TYPE");
        public final static Property QueryReplyAttachment = new Property(6, String.class, "queryReplyAttachment", false, "QUERY_REPLY_ATTACHMENT");
        public final static Property QueryResponseExtraLink = new Property(7, String.class, "queryResponseExtraLink", false, "QUERY_RESPONSE_EXTRA_LINK");
        public final static Property QueryResponseType = new Property(8, String.class, "queryResponseType", false, "QUERY_RESPONSE_TYPE");
    }

}
