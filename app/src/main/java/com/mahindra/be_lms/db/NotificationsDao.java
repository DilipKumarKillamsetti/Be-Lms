package com.mahindra.be_lms.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "NOTIFICATIONS".
 */
public class NotificationsDao extends AbstractDao<Notifications, Long> {

    public static final String TABLENAME = "NOTIFICATIONS";

    public NotificationsDao(DaoConfig config) {
        super(config);
    }


    public NotificationsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"NOTIFICATIONS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NOTIFICATION_ID\" TEXT," + // 1: notificationID
                "\"NOTIFICATION_TITLE\" TEXT," + // 2: notificationTitle
                "\"NOTIFICATION_MSG\" TEXT," + // 3: notificationMsg
                "\"NOTIFICATION_TYPE\" TEXT," + // 4: notificationType
                "\"NOTIFICATION_OTHER_TYPE\" TEXT," + // 5: notificationOtherType
                "\"NOTIFICATIONATTACH_LINK\" TEXT," + // 6: notificationattachLink
                "\"NOTIFICATIONEXTRA_LINK\" TEXT);"); // 7: notificationextraLink
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NOTIFICATIONS\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, Notifications entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String notificationID = entity.getNotificationID();
        if (notificationID != null) {
            stmt.bindString(2, notificationID);
        }

        String notificationTitle = entity.getNotificationTitle();
        if (notificationTitle != null) {
            stmt.bindString(3, notificationTitle);
        }

        String notificationMsg = entity.getNotificationMsg();
        if (notificationMsg != null) {
            stmt.bindString(4, notificationMsg);
        }

        String notificationType = entity.getNotificationType();
        if (notificationType != null) {
            stmt.bindString(5, notificationType);
        }

        String notificationOtherType = entity.getNotificationOtherType();
        if (notificationOtherType != null) {
            stmt.bindString(6, notificationOtherType);
        }

        String notificationattachLink = entity.getNotificationattachLink();
        if (notificationattachLink != null) {
            stmt.bindString(7, notificationattachLink);
        }

        String notificationextraLink = entity.getNotificationextraLink();
        if (notificationextraLink != null) {
            stmt.bindString(8, notificationextraLink);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public Notifications readEntity(Cursor cursor, int offset) {
        Notifications entity = new Notifications( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // notificationID
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // notificationTitle
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // notificationMsg
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // notificationType
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // notificationOtherType
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // notificationattachLink
                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // notificationextraLink
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, Notifications entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNotificationID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNotificationTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNotificationMsg(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNotificationType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNotificationOtherType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNotificationattachLink(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setNotificationextraLink(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(Notifications entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(Notifications entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity Notifications.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property NotificationID = new Property(1, String.class, "notificationID", false, "NOTIFICATION_ID");
        public final static Property NotificationTitle = new Property(2, String.class, "notificationTitle", false, "NOTIFICATION_TITLE");
        public final static Property NotificationMsg = new Property(3, String.class, "notificationMsg", false, "NOTIFICATION_MSG");
        public final static Property NotificationType = new Property(4, String.class, "notificationType", false, "NOTIFICATION_TYPE");
        public final static Property NotificationOtherType = new Property(5, String.class, "notificationOtherType", false, "NOTIFICATION_OTHER_TYPE");
        public final static Property NotificationattachLink = new Property(6, String.class, "notificationattachLink", false, "NOTIFICATIONATTACH_LINK");
        public final static Property NotificationextraLink = new Property(7, String.class, "notificationextraLink", false, "NOTIFICATIONEXTRA_LINK");
    }

}
