package com.mahindra.be_lms.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "QUALIFICATION".
 */
public class QualificationDao extends AbstractDao<Qualification, Long> {

    public static final String TABLENAME = "QUALIFICATION";

    public QualificationDao(DaoConfig config) {
        super(config);
    }


    public QualificationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"QUALIFICATION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"QUALIFICATION_ID\" TEXT," + // 1: qualificationID
                "\"QUALIFICATION_NAME\" TEXT," + // 2: qualificationName
                "\"QUALIFICATION_REMARK\" TEXT);"); // 3: qualificationRemark
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"QUALIFICATION\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, Qualification entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String qualificationID = entity.getQualificationID();
        if (qualificationID != null) {
            stmt.bindString(2, qualificationID);
        }

        String qualificationName = entity.getQualificationName();
        if (qualificationName != null) {
            stmt.bindString(3, qualificationName);
        }

        String qualificationRemark = entity.getQualificationRemark();
        if (qualificationRemark != null) {
            stmt.bindString(4, qualificationRemark);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public Qualification readEntity(Cursor cursor, int offset) {
        Qualification entity = new Qualification( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // qualificationID
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // qualificationName
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // qualificationRemark
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, Qualification entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setQualificationID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setQualificationName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setQualificationRemark(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(Qualification entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(Qualification entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity Qualification.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property QualificationID = new Property(1, String.class, "qualificationID", false, "QUALIFICATION_ID");
        public final static Property QualificationName = new Property(2, String.class, "qualificationName", false, "QUALIFICATION_NAME");
        public final static Property QualificationRemark = new Property(3, String.class, "qualificationRemark", false, "QUALIFICATION_REMARK");
    }

}
