package com.mahindra.be_lms.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "PROFILE".
 */
public class ProfileDao extends AbstractDao<Profile, Long> {

    public static final String TABLENAME = "PROFILE";

    public ProfileDao(DaoConfig config) {
        super(config);
    }


    public ProfileDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"PROFILE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PROFILE_ID\" TEXT," + // 1: profileID
                "\"PROFILE_NAME\" TEXT," + // 2: profileName
                "\"PROFILE_JSON\" TEXT," + // 3: profile_json
                "\"PROFILE_APPROVAL\" INTEGER," + // 4: profile_approval
                "\"PROFILE_REQUESTED\" INTEGER);"); // 5: profile_requested
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PROFILE\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, Profile entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String profileID = entity.getProfileID();
        if (profileID != null) {
            stmt.bindString(2, profileID);
        }

        String profileName = entity.getProfileName();
        if (profileName != null) {
            stmt.bindString(3, profileName);
        }

        String profile_json = entity.getProfile_json();
        if (profile_json != null) {
            stmt.bindString(4, profile_json);
        }

        Boolean profile_approval = entity.getProfile_approval();
        if (profile_approval != null) {
            stmt.bindLong(5, profile_approval ? 1L : 0L);
        }

        Boolean profile_requested = entity.getProfile_requested();
        if (profile_requested != null) {
            stmt.bindLong(6, profile_requested ? 1L : 0L);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public Profile readEntity(Cursor cursor, int offset) {
        Profile entity = new Profile( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // profileID
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // profileName
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // profile_json
                cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // profile_approval
                cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0 // profile_requested
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, Profile entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProfileID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setProfileName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProfile_json(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setProfile_approval(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setProfile_requested(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(Profile entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(Profile entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity Profile.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ProfileID = new Property(1, String.class, "profileID", false, "PROFILE_ID");
        public final static Property ProfileName = new Property(2, String.class, "profileName", false, "PROFILE_NAME");
        public final static Property Profile_json = new Property(3, String.class, "profile_json", false, "PROFILE_JSON");
        public final static Property Profile_approval = new Property(4, Boolean.class, "profile_approval", false, "PROFILE_APPROVAL");
        public final static Property Profile_requested = new Property(5, Boolean.class, "profile_requested", false, "PROFILE_REQUESTED");
    }

}
