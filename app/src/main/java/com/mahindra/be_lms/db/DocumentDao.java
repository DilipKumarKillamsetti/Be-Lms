package com.mahindra.be_lms.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "DOCUMENT".
 */
public class DocumentDao extends AbstractDao<Document, Long> {

    public static final String TABLENAME = "DOCUMENT";

    public DocumentDao(DaoConfig config) {
        super(config);
    }


    public DocumentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"DOCUMENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DOCUMENT_TREE_ID\" TEXT," + // 1: documentTreeID
                "\"DOCUMENT_NAME\" TEXT," + // 2: documentName
                "\"DOCUMENT_REFERENCED_ID\" INTEGER," + // 3: documentReferencedID
                "\"DOCUMENT_HIT_DATE\" INTEGER," + // 4: documentHitDate
                "\"DOCUMENT_HIT_COUNT\" INTEGER," + // 5: documentHitCount
                "\"DOCUMENT_ROLE\" TEXT);"); // 6: documentRole
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOCUMENT\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, Document entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String documentTreeID = entity.getDocumentTreeID();
        if (documentTreeID != null) {
            stmt.bindString(2, documentTreeID);
        }

        String documentName = entity.getDocumentName();
        if (documentName != null) {
            stmt.bindString(3, documentName);
        }

        Long documentReferencedID = entity.getDocumentReferencedID();
        if (documentReferencedID != null) {
            stmt.bindLong(4, documentReferencedID);
        }

        java.util.Date documentHitDate = entity.getDocumentHitDate();
        if (documentHitDate != null) {
            stmt.bindLong(5, documentHitDate.getTime());
        }

        Integer documentHitCount = entity.getDocumentHitCount();
        if (documentHitCount != null) {
            stmt.bindLong(6, documentHitCount);
        }

        String documentRole = entity.getDocumentRole();
        if (documentRole != null) {
            stmt.bindString(7, documentRole);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public Document readEntity(Cursor cursor, int offset) {
        Document entity = new Document( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // documentTreeID
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // documentName
                cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // documentReferencedID
                cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // documentHitDate
                cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // documentHitCount
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // documentRole
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, Document entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDocumentTreeID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDocumentName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDocumentReferencedID(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setDocumentHitDate(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setDocumentHitCount(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setDocumentRole(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(Document entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(Document entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity Document.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DocumentTreeID = new Property(1, String.class, "documentTreeID", false, "DOCUMENT_TREE_ID");
        public final static Property DocumentName = new Property(2, String.class, "documentName", false, "DOCUMENT_NAME");
        public final static Property DocumentReferencedID = new Property(3, Long.class, "documentReferencedID", false, "DOCUMENT_REFERENCED_ID");
        public final static Property DocumentHitDate = new Property(4, java.util.Date.class, "documentHitDate", false, "DOCUMENT_HIT_DATE");
        public final static Property DocumentHitCount = new Property(5, Integer.class, "documentHitCount", false, "DOCUMENT_HIT_COUNT");
        public final static Property DocumentRole = new Property(6, String.class, "documentRole", false, "DOCUMENT_ROLE");
    }

}
